"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

import logging

from aiogram import Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from warehouse_bot.services import product_service

# –°–æ–∑–¥–∞–µ–º "—Ä–æ—É—Ç–µ—Ä" –¥–ª—è –Ω–∞—à–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
router = Router()


@router.message(CommandStart())
async def handle_start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Å–∫–ª–∞–¥—Å–∫–æ–π –±–æ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")


@router.message(Command(commands=["list"]))
async def handle_list_products(message: Message, session: AsyncSession) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ middleware).
    """
    try:
        products = await product_service.get_all_products(session)

        if not products:
            await message.answer("–°–∫–ª–∞–¥ –ø—É—Å—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        response_lines = ["–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:"]
        for product in products:
            response_lines.append(f"- {product.name}: {product.quantity} —à—Ç.")

        await message.answer("\n".join(response_lines))

    except Exception:
        # üõ°Ô∏è –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        logging.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ handle_list_products")
        # üó£Ô∏è –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
